name: Test and Generate Reports

on:
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Test type to execute'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - conversation-api
          - history-enthusiast
          - llm-judge
          - semantic-similarity

jobs:
  test-and-report:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      #- name: Create logs directory
        #run: mkdir -p logSystem/logs

      - name: Run Playwright tests
        env:
          CI: true
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          if [ "${{ github.event.inputs.test_type }}" = "all" ]; then
            npx playwright test
          else
            npx playwright test --grep "${{ github.event.inputs.test_type }}"
          fi

      - name: Generate Reports
        if: always()
        run: |
          # Check if CSV file exists before generating reports
          if [ -f "logSystem/logs/judge_results.csv" ]; then
            npm run reports
            echo "Reports generated successfully"
          else
            echo "judge_results.csv not found. Creating empty file to avoid errors."
            touch logSystem/logs/judge_results.csv
            echo "header1,header2,header3" > logSystem/logs/judge_results.csv
            npm run reports || echo "Failed to generate reports, but continuing..."
          fi

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results/
          retention-days: 30

      - name: Upload Playwright Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Upload CSV Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: csv-report
          path: logSystem/logs/judge_results.csv
          retention-days: 30

      - name: Upload HTML Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: html-report
          path: judge-reports/reports/llm_judge_report.html
          retention-days: 30

      - name: Upload Generated Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: all-generated-reports
          path: |
            judge-reports/reports/
            logSystem/logs/
          retention-days: 30

      - name: Upload Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: system-logs
          path: logSystem/logs/
          retention-days: 30

      # - name: Comment PR with Results
      #   if: always() && github.event_name == 'pull_request'
      #   uses: actions/github-script@v7
      #   with:
      #     script: |
      #       const fs = require('fs');
      #       let comment = `## üß™ Resultados dos Testes\n\n`;
            
      #       // Verificar se existem relat√≥rios
      #       if (fs.existsSync('judge-reports/reports/llm_judge_report.html')) {
      #         comment += `‚úÖ Relat√≥rio HTML gerado com sucesso\n`;
      #       } else {
      #         comment += `‚ùå Falha ao gerar relat√≥rio HTML\n`;
      #       }
            
      #       if (fs.existsSync('logSystem/logs/judge_results.csv')) {
      #         comment += `‚úÖ Relat√≥rio CSV gerado com sucesso\n`;
      #       } else {
      #         comment += `‚ùå Falha ao gerar relat√≥rio CSV\n`;
      #       }
            
      #       comment += `\n### üìÅ Artefatos Dispon√≠veis\n`;
      #       comment += `- üìä [Relat√≥rio HTML](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n`;
      #       comment += `- üìÑ [Relat√≥rio CSV](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n`;
      #       comment += `- üé≠ [Relat√≥rio Playwright](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n`;
      #       comment += `- üìù [Logs do Sistema](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n`;
            
      #       if (context.eventName === 'pull_request') {
      #         github.rest.issues.createComment({
      #           issue_number: context.issue.number,
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           body: comment
      #         });
      #       }
